<?php

/**
 * Implements hook_permission.
 */
function plus_city_permission() {
  return array(
    'administer plus_city' => array(
      'title' => t('Administer Plus7 City Management'),
    ),
  );
}

/**
 * Implements hook_menu.
 */
function plus_city_menu() {
  $menu = array();

  $menu['plus_city'] = array(
    'title' => 'Plus7 City Management',
    'description' => 'Create / Modify city information.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plus_city_import'),
    'access arguments' => array('plus_city'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $menu;
}


function plus_city_import() {

  $key = '1710e3d481401421c8727e0c971a4dfd';
  $city = $_GET['city'];

  $city_resource = taxonomy_get_term_by_name($city);
  $city_resource = (!empty($city_resource)) ? reset($city_resource) : '';

  if(empty($city_resource)) {
    echo 'Invalid City: '. $city;
    exit;
  }


  // Wrapping taxonomy term data into entity.
  $city_wrapper = entity_metadata_wrapper('taxonomy_term', $city_resource);
  $city_id = $city_wrapper->field_city_id->value();

  for ($i = 0; $i<=100; ) {
    $plus_tapi_request_method = variable_get('plus_tapi_request_method', 'curl');
    $plus_tapi_function = $plus_tapi_request_method . '_request';
    $service_url = 'https://developers.zomato.com/api/v2.1/search?entity_type=city&sort=rating&order=desc&entity_id='. $city_id . '&start='. $i;
    $options['headers'] = array(
      'key' => 'user-key:'. $key,
    );
    $plus_tapi_obj = new PlusTAPI();
    $restaurants = array();
    $response = $plus_tapi_obj->{$plus_tapi_function}($service_url, $options);
    $restaurants = $response['restaurants'];
    $offset = $response['results_start'];
    $status = create_taxonomy_term_dynamically($restaurants);
    echo $status. ' Offset: '. $offset." <br/>";
    $i = $i + 20;
  }

  echo "Completed";exit;
}



function create_taxonomy_term_dynamically($restaurants) {
  $vid = 3; // Cities vocabulary ID: 3
  foreach ($restaurants as $key => $value) {
    $res_name = $value['restaurant']['name'];
    $res_add = $value['restaurant']['location']['address'];

    $query = db_select('field_data_field_city_id', 'c')
      ->fields('c', array('entity_id'))
      ->condition('c.field_city_id_value', $value['restaurant']['location']['city_id']);
    $result = $query->execute()->fetchAssoc();
    $parent = $result['entity_id'];
    $term = new stdClass();
    $term->name = $res_name;
    $term->description = $res_add;
    $term->vid = $vid;
    $term->parent = $parent; // City term ID

    // Download the restauarant image from Zomato.
    //$image_url = str_replace('https://', 'http://', $value['restaurant']['featured_image']);
    $image_url = $value['restaurant']['featured_image'];
    $image_name = drupal_basename($image_url);
    $uri  =  'public://files/restuarant_images/'. $image_name;
    $new_file = download_external_file($image_url, $uri, FILE_EXISTS_REPLACE);
    if($new_file) {
      $term->field_restaurant_image[LANGUAGE_NONE][0]['fid'] = $new_file['fid'];
    }
    else {
      drupal_set_message("Image Already exists");
    }

    taxonomy_term_save($term);
    drupal_set_message('term added');
  }
  return 'success: ';

}

function download_external_file($url, $uri, $save_mode = FILE_EXISTS_RENAME, $manage_file = TRUE) {

  $url_info = parse_url($url);
  $url_path_info = pathinfo($url_info['path']);

  //This helps with filenames with spaces
  $url = $url_info['scheme'] . '://' . $url_info['host']  . $url_path_info['dirname'] .'/'. rawurlencode($url_path_info['basename']);

  //Need to remove the filename from the uri
  $uri_target = file_uri_target($uri);
  $uri_scheme = file_uri_scheme($uri);
  $uri_path_info = pathinfo($uri_target);
  $directory = file_stream_wrapper_uri_normalize($uri_scheme . "://" . $uri_path_info['dirname']);

  if(file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    $drupal_result = GetImageFromUrl($url);
    if(!empty($drupal_result)) {
      $path = file_stream_wrapper_uri_normalize($uri);
      if($manage_file) {
        $new_file = file_save_data($drupal_result, $path, $save_mode);
      } else {
        return file_unmanaged_save_data($drupal_result, $path, $save_mode);
      }
    } else {
      drupal_set_message("Error downloading file, no data recieved for " . $url);
      return FALSE;
    }
    $new_file->display = 1;
    return (array)$new_file;
  } else {
    drupal_set_message("Could not create directory");
  }
}


function GetImageFromUrl($link) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_POST, 0);
  curl_setopt($ch, CURLOPT_URL, $link);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  $result = curl_exec($ch);
  curl_close($ch);

  return $result;
}

